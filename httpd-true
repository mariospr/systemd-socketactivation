#!/bin/env python2
import os
import sys
import time
import socket
import BaseHTTPServer
from systemd import journal


def get_systemd_socket():
    """Shows how to get the socket"""
    SYSTEMD_FIRST_SOCKET_FD = 3
    socket_type = BaseHTTPServer.HTTPServer.socket_type
    address_family = BaseHTTPServer.HTTPServer.address_family
    return socket.fromfd(SYSTEMD_FIRST_SOCKET_FD, address_family, socket_type)


class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    """Returns the string 'true' to all requests"""
    def do_GET(self):
        journal.send('[httpd-true] do GET received')

        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"true")
        self.wfile.write(b"\n")
        return
    do_POST = do_GET


class SockInheritHTTPServer(BaseHTTPServer.HTTPServer):
    def __init__(self, address_info, handler, bind_and_activate=True):
        # Note that we call it with bind_and_activate = False.
        BaseHTTPServer.HTTPServer.__init__(self,
                                           address_info,
                                           handler,
                                           bind_and_activate=False)

        journal.send('[httpd-true] systemd socket 1: %s' % repr(self.socket))
        if os.environ.get('LISTEN_PID', None) == str(os.getpid()):
            # The socket from systemd needs to be set AFTER calling the parent's
            # class's constructor, otherwise HTTPServer.__init__() will re-set
            # self.socket() and the handover won't work.
            self.socket = get_systemd_socket()

        journal.send('[httpd-true] systemd socket 2: %s' % repr(self.socket))

        if bind_and_activate:
            if not os.environ.get('LISTEN_PID', None):
                self.server_bind()
            self.server_activate()

        journal.send('[httpd-true] systemd socket 3: %s' % repr(self.socket))



def wait_loop(delay=60):
    # The connection/port/host doesn't really matter as we don't allocate the
    # socket ourselves. Pass it in as localhost:80
    journal.send('[httpd-true] wait loop')
    httpserv = SockInheritHTTPServer(('localhost', 8008), RequestHandler)
    httpserv.timeout = 1
    start = time.clock()
    end = start + delay
    while time.clock() < end:
        httpserv.handle_request()
    httpserv.server_close()

if __name__ == "__main__":
    if os.environ.get('LISTEN_PID', None) == str(os.getpid()):
        journal.send('[httpd-true] SOCKET ACTIVATED!')
    else:
        journal.send('[httpd-true] MANUALLY RUN!')

    wait_loop()
    print("Done serving, shutting down")
    sys.exit()
